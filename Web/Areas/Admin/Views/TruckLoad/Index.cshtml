@model LMYFrameWorkMVC.Common.Models.Modules.Admin.Truck.Load.TruckLoadSearchModel
@using LMYFrameWorkMVC.Web.CommonCode
@{
    ViewBag.Title = Resources.SiteMapLocalizations.TruckLoadsList;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    LMYFrameWorkMVC.Common.Models.Modules.Admin.Truck.Load.TruckLoadModel truckLoadModel = new LMYFrameWorkMVC.Common.Models.Modules.Admin.Truck.Load.TruckLoadModel();
}
<div id="alertsContainer">
    @Html.Partial("~/Areas/Admin/Views/Shared/_Alerts.cshtml", Model)
</div>


<div class="col-md-12" id="container">

    <div class="portlet light bordered">
        <div class="portlet-title">
            <div class="caption font-dark">

                <span class="caption-subject bold uppercase">@Resources.SiteMapLocalizations.TruckLoadsList</span>
            </div>

            <div>
                <div class="btn-group pull-right" id="tools">
                    @if (User.HasAccessToNode(Url.Action("TruckLoadsList-CreateLoad", "TruckLoad")))
                {
                    <a class="dt-button btn blue btn-outline modalSuccess" href="@Url.Action("TruckLoadsList-CreateLoad", "TruckLoad")" data-modal='' data-modalContainer='#container' data-alertsContainer='#alertsContainer'>@Resources.Resources.Create</a>
                }
                </div>
            </div>
        </div>

        <div class="portlet-body">

            @using (Html.BeginForm(null, null, new { }, FormMethod.Post, new { id = "searchForm", @data_ajaxSubmit = "true" }))
        {
            <div class="row form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.TruckId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.HiddenFor(model => model.TruckModel.Name, new { @data_disableValidation = "true" })
                            @Html.DropDownListFor(model => model.TruckId, Enumerable.Empty<SelectListItem>(), " ",
                            htmlAttributes: new
                            {
                                @class = "form-control select2",
                                @data_url = Url.Action("TruckLoadsList-GetTrucksBySelect2Parameters", "Truck"),
                                @data_container = "#container",
                                @data_alertsContainer = "#alertsContainer",
                                @data_val_prop = "Id",
                                @data_text_prop = "Name",
                                @data_selected_text = Model.TruckModel.Name,
                                @data_selected_val = Model.TruckId,
                                @data_save_text_in = Html.IdFor(model => model.TruckModel.Name),
                            })

                            @Html.ValidationMessageFor(model => model.TruckId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.DriverId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.HiddenFor(model => model.DriverModel.Name, new { @data_disableValidation = "true" })
                            @Html.DropDownListFor(model => model.DriverId, Enumerable.Empty<SelectListItem>(), " ",
                            htmlAttributes: new
                            {
                                @class = "form-control select2",
                                @data_url = Url.Action("TruckLoadsList-GetDriversBySelect2Parameters", "Driver"),
                                @data_container = "#container",
                                @data_alertsContainer = "#alertsContainer",
                                @data_val_prop = "Id",
                                @data_text_prop = "Name",
                                @data_selected_text = Model.DriverModel.Name,
                                @data_selected_val = Model.DriverId,
                                @data_save_text_in = Html.IdFor(model => model.DriverModel.Name),
                            })

                            @Html.ValidationMessageFor(model => model.DriverId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.FromDateString, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.FromDateString, htmlAttributes: new { @class = "form-control datePicker" })
                            @Html.ValidationMessageFor(model => model.FromDateString, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.ToDateString, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.ToDateString, htmlAttributes: new { @class = "form-control datePicker" })
                            @Html.ValidationMessageFor(model => model.ToDateString, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.StatusId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.StatusId, Model.StatusesList, "", htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.HiddenFor(model => model.CompanyModel.Name, new { @data_disableValidation = "true" })
                            @Html.DropDownListFor(model => model.CompanyId, Enumerable.Empty<SelectListItem>(), " ",
                            htmlAttributes: new
                            {
                                @class = "form-control select2",
                                @data_url = Url.Action("TruckLoadList-GetCompaniesBySelect2Parameters", "Company"),
                                @data_container = "#container",
                                @data_alertsContainer = "#alertsContainer",
                                @data_val_prop = "Id",
                                @data_text_prop = "Name",
                                @data_selected_text = Model.CompanyModel.Name,
                                @data_selected_val = Model.CompanyId,
                                @data_save_text_in = Html.IdFor(model => model.CompanyModel.Name),
                            })

                            @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group ">
                    <div class="col-md-12 text-center">
                        <input type="button" id="restButton" value="@Resources.Resources.Reset" class="btn btn-info" />
                        <input type="submit" value="@Resources.Resources.Search" class="btn btn-success" />
                    </div>
                </div>
            </div>
        }

            <div class="">
                <table class="table table-striped table-bordered table-hover table-checkable order-column dt-responsive" width="100%" id="dynamic-table">
                    <thead>
                        <tr>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.TruckId) </th>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.FromStateId) </th>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.ToStateId) </th>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.FromDateString) </th>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.ToDateString) </th>
                            <th width="15%">@Html.DisplayNameFor(model => truckLoadModel.TotalProfit) </th>
                            <th width="15%">@Resources.Resources.Actions</th>
                        </tr>
                    </thead>

                </table>
            </div>

        </div>
    </div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        //initiate dataTables plugin
        var dataTableWrapper = new LMYFrameWork.DataTableWrapper();

        LMYFrameWork.CommonMethods.addFormSubmitEvent('#searchForm', function (e) {
            e.preventDefault();

            dataTableWrapper.refreshTable('#dynamic-table');
        });

        $('#restButton').click(function () {
            $('#@Html.IdFor(m=>m.TruckId)').val('').change();
            $('#@Html.IdFor(m=>m.DriverId)').val('').change();
            $('#@Html.IdFor(m=>m.CompanyId)').val('').change();
            $('#@Html.IdFor(m=>m.StatusId)').val('').change();
            $('#@Html.IdFor(m=>m.FromDateString)').val('').change();
            $('#@Html.IdFor(m=>m.ToDateString)').val('').change();

            dataTableWrapper.refreshTable('#dynamic-table');
        });

        dataTableWrapper.initServerSide({
            buttonsContainer: "#tools",
            container: "#container",
            alertsContainer: "#alertsContainer",
            url: '@Url.Action("GetTruckLoads","TruckLoad")',
            table: '#dynamic-table',
            //for custom search parameters
            data: function (d) {
                return $.extend({}, d, {
                    "CustomSearchObject": {
                        TruckId: $('#@Html.IdFor(m=>m.TruckId)').val(),
                        DriverId: $('#@Html.IdFor(m=>m.DriverId)').val(),
                        CompanyId: $('#@Html.IdFor(m=>m.CompanyId)').val(),
                        StatusId: $('#@Html.IdFor(m=>m.StatusId)').val(),
                        FromDateString: $('#@Html.IdFor(m=>m.FromDateString)').val(),
                        ToDateString: $('#@Html.IdFor(m=>m.ToDateString)').val(),
                    }
                });
            },
            renderComplete: function () {
                $('.modalSuccess').on('success', function () {
                    dataTableWrapper.refreshTable('#dynamic-table');
                });
            },
            order: [[0, 'asc']],
            columns:
               [
                {
                    "data": "TruckId",
                    "render": function (data, type, row) {
                        @if (User.HasAccessToNode(Url.Action("View", "TruckLoad")))
                        {
                            <text>
                        var anchor = $("<a   data-toggle='tooltip' data-modal='' data-modalContainer='#container' data-alertsContainer='#alertsContainer'> </a>")
                        anchor.html(row.TruckModel ? row.TruckModel.Name:'');
                        anchor.attr("href", "@Url.Action("View", "TruckLoad")/" + row.Id);
                        return anchor[0].outerHTML;

                        </text>
                        }

                        return data;
                    }
                },
                {
                    "data": "FromStateId",
                    "render": function (data, type, row) {
                        if (row.FromStateModel && row.FromStateModel.Name)
                            return row.FromStateModel.Name;

                        return '';
                    }
                },
                {
                    "data": "ToStateId",
                    "render": function (data, type, row) {
                        if (row.ToStateModel && row.ToStateModel.Name)
                            return row.ToStateModel.Name;

                        return '';
                    }
                },
                { "data": "FromDateString" },
                { "data": "ToDateString" },
                { "data": "TotalProfit" },
                {
                    "data": "Id",
                    exportable: false,
                    sortable: false,
                    "render": function (data, type, row) {

                        var edit = '', deleteurl = '';
                        @if (User.HasAccessToNode(Url.Action("Edit", "TruckLoad")))
                        {
                          <text>
                        edit = "<a class='modalSuccess' href='@Url.Action("Edit", "TruckLoad")/" + data + "' data-toggle='tooltip' title ='@Resources.Resources.Edit' data-modal='' data-modalContainer='#container' data-alertsContainer='#alertsContainer'><i class='fa fa-edit btn btn-xs green' ></i></a>"
                        </text>
                        }

                        @if (User.HasAccessToNode(Url.Action("Delete", "TruckLoad")))
                        {
                            <text>
                        deleteurl = "<a class='modalSuccess'  href='@Url.Action("Delete","TruckLoad")/" + data + "' data-modal='' data-modalContainer='#container' data-alertsContainer='#alertsContainer'  data-toggle='tooltip' title ='@Resources.Resources.Delete'><i class='fa fa-close btn btn-xs red' ></i></a>";
                        </text>
                        }

                        return "<div class='btn-group'>" + edit + deleteurl + "</div>";
                    },
                }
               ],
        }
    );
    });
</script>

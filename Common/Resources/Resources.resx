<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArabicName" xml:space="preserve">
    <value>Arabic Name</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EnglishName" xml:space="preserve">
    <value>English Name</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="ValidateNumber" xml:space="preserve">
    <value>{0} must be a number.</value>
  </data>
  <data name="ValidationInvalidEmail" xml:space="preserve">
    <value>The {0} field is not a valid e-mail address.</value>
  </data>
  <data name="ValidationMinimumLength" xml:space="preserve">
    <value>The {0} must be at least {1} characters long.</value>
  </data>
  <data name="ValidationNotMatch" xml:space="preserve">
    <value>The new password and confirmation password do not match.</value>
  </data>
  <data name="ValidationNumber" xml:space="preserve">
    <value>{0} must be numbers only</value>
  </data>
  <data name="ValidationRequired" xml:space="preserve">
    <value>{0} is required.</value>
  </data>
  <data name="RememberMe" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ValidationRegEx" xml:space="preserve">
    <value>{0} must be valid</value>
  </data>
  <data name="Setting" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="RolesList" xml:space="preserve">
    <value>Roles list</value>
  </data>
  <data name="Permisions" xml:space="preserve">
    <value>Permisions</value>
  </data>
  <data name="ValidationAllowedFileTypes" xml:space="preserve">
    <value>the {0} file type must be one of the following ({1})</value>
  </data>
  <data name="ValidationMaxFileSize" xml:space="preserve">
    <value>the {0} file size exceeds the allowed size must be less than ({1} bytes)</value>
  </data>
  <data name="FromUser" xml:space="preserve">
    <value>From </value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="ToUser" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="MessageText" xml:space="preserve">
    <value>Message text</value>
  </data>
  <data name="ToUsers" xml:space="preserve">
    <value>To users</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="ValidationMaxLength" xml:space="preserve">
    <value>The {0} character number must be less than {1}.</value>
  </data>
  <data name="Direction" xml:space="preserve">
    <value />
  </data>
  <data name="ValidationDate" xml:space="preserve">
    <value>The {0} must be a date</value>
  </data>
  <data name="EmailExists" xml:space="preserve">
    <value>Email  already exists</value>
  </data>
  <data name="EnterMessage" xml:space="preserve">
    <value>Please enter message</value>
  </data>
  <data name="LoginFirstToCompleteOperation" xml:space="preserve">
    <value>Login first to complete operation</value>
  </data>
  <data name="MessageSent" xml:space="preserve">
    <value>Message Sent</value>
  </data>
  <data name="NameExists" xml:space="preserve">
    <value>Name already exists</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Not found</value>
  </data>
  <data name="PhoneNumberExists" xml:space="preserve">
    <value>Phone number already exists</value>
  </data>
  <data name="RefrenceDeleteError" xml:space="preserve">
    <value>This record could not be deleted because there are records related to it </value>
  </data>
  <data name="RoleAddedSuccessfully" xml:space="preserve">
    <value>Role added successfully</value>
  </data>
  <data name="RoleDeletedSuccessfully" xml:space="preserve">
    <value>Role deleted successfully</value>
  </data>
  <data name="RoleUpdatedSuccessfully" xml:space="preserve">
    <value>Role updated successfully</value>
  </data>
  <data name="SettingUpdatedSuccessfully" xml:space="preserve">
    <value>Setting updated successfully</value>
  </data>
  <data name="ThisIsNotDeletAble" xml:space="preserve">
    <value>this entity is not deletable because it is part of the system</value>
  </data>
  <data name="ThisIsTheLastRecord" xml:space="preserve">
    <value>You can not delete the last record </value>
  </data>
  <data name="UserAddedSuccessfully" xml:space="preserve">
    <value>User added successfully</value>
  </data>
  <data name="UserDeletedSuccessfully" xml:space="preserve">
    <value>User deleted successfully</value>
  </data>
  <data name="UserNameExists" xml:space="preserve">
    <value>User name  already exists</value>
  </data>
  <data name="UserPasswordChangedSuccessfully" xml:space="preserve">
    <value>Password changed successfully</value>
  </data>
  <data name="UserUpdatedSuccessfully" xml:space="preserve">
    <value>User updated successfully</value>
  </data>
  <data name="WrongUserNameOrPassword" xml:space="preserve">
    <value>Wrong username or password</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="AtDate" xml:space="preserve">
    <value>At date</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="ContactNumber" xml:space="preserve">
    <value>Contact number</value>
  </data>
  <data name="Driver" xml:space="preserve">
    <value>Driver</value>
  </data>
  <data name="DriverPerMileCost" xml:space="preserve">
    <value>Driver per mile cost</value>
  </data>
  <data name="ExpenseType" xml:space="preserve">
    <value>Expense type</value>
  </data>
  <data name="FromDate" xml:space="preserve">
    <value>From date</value>
  </data>
  <data name="FromNotes" xml:space="preserve">
    <value>From notes</value>
  </data>
  <data name="FromState" xml:space="preserve">
    <value>From state</value>
  </data>
  <data name="FuelCost" xml:space="preserve">
    <value>Fuel cost</value>
  </data>
  <data name="Milage" xml:space="preserve">
    <value>Milage</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="OnBuyDate" xml:space="preserve">
    <value>On buy date</value>
  </data>
  <data name="OnBuyExpenses" xml:space="preserve">
    <value>On buy expenses</value>
  </data>
  <data name="OnBuyMilage" xml:space="preserve">
    <value>On buy milage</value>
  </data>
  <data name="OnBuyNotes" xml:space="preserve">
    <value>On buy notes</value>
  </data>
  <data name="OnBuyPrice" xml:space="preserve">
    <value>On buy price</value>
  </data>
  <data name="OtherCosts" xml:space="preserve">
    <value>Other costs</value>
  </data>
  <data name="OtherCostsNotes" xml:space="preserve">
    <value>Other costs notes</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PricePerMile" xml:space="preserve">
    <value>Price per mile</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="StateCode" xml:space="preserve">
    <value>State code</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="ToDate" xml:space="preserve">
    <value>To date</value>
  </data>
  <data name="ToNotes" xml:space="preserve">
    <value>To notes</value>
  </data>
  <data name="ToStateNotes" xml:space="preserve">
    <value>To state notes</value>
  </data>
  <data name="Truck" xml:space="preserve">
    <value>Truck</value>
  </data>
  <data name="ToState" xml:space="preserve">
    <value>To state </value>
  </data>
  <data name="AlreadyExists" xml:space="preserve">
    <value>{0} already exists</value>
  </data>
  <data name="CompanyAddedSuccessfully" xml:space="preserve">
    <value>Company added successfully</value>
  </data>
  <data name="CompanyDeletedSuccessfully" xml:space="preserve">
    <value>Company deleted successfully</value>
  </data>
  <data name="CompanyUpdatedSuccessfully" xml:space="preserve">
    <value>Company updated successfully</value>
  </data>
  <data name="DriverAddedSuccessfully" xml:space="preserve">
    <value>Driver added successfully</value>
  </data>
  <data name="DriverDeletedSuccessfully" xml:space="preserve">
    <value>Driver deleted successfully</value>
  </data>
  <data name="DriverUpdatedSuccessfully" xml:space="preserve">
    <value>Driver updated successfully</value>
  </data>
  <data name="USAStateAddedSuccessfully" xml:space="preserve">
    <value>State added successfully</value>
  </data>
  <data name="USAStateDeletedSuccessfully" xml:space="preserve">
    <value>State deleted successfully</value>
  </data>
  <data name="USAStateUpdatedSuccessfully" xml:space="preserve">
    <value>State updated successfully</value>
  </data>
  <data name="TotalCosts" xml:space="preserve">
    <value>Total costs</value>
  </data>
  <data name="TotalIncome" xml:space="preserve">
    <value>Total income</value>
  </data>
  <data name="TotalProfit" xml:space="preserve">
    <value>Total profit</value>
  </data>
  <data name="DriverCost" xml:space="preserve">
    <value>Driver cost</value>
  </data>
  <data name="DurationIsOverLappedWithOtherLoad" xml:space="preserve">
    <value>Duration is over lapped with other load</value>
  </data>
  <data name="LoadAddedSuccessfully" xml:space="preserve">
    <value>Load added successfully</value>
  </data>
  <data name="LoadDeletedSuccessfully" xml:space="preserve">
    <value>Load deleted successfully</value>
  </data>
  <data name="LoadUpdatedSuccessfully" xml:space="preserve">
    <value>Load updated successfully</value>
  </data>
  <data name="TruckAddedSuccessfully" xml:space="preserve">
    <value>Truck added successfully</value>
  </data>
  <data name="TruckDeletedSuccessfully" xml:space="preserve">
    <value>Truck deleted successfully</value>
  </data>
  <data name="TruckExpenseAddedSuccessfully" xml:space="preserve">
    <value>Truck expense added successfully</value>
  </data>
  <data name="TruckExpenseDeletedSuccessfully" xml:space="preserve">
    <value>Truck expense deleted successfully</value>
  </data>
  <data name="TruckExpenseUpdatedSuccessfully" xml:space="preserve">
    <value>Truck expense updated successfully</value>
  </data>
  <data name="Trucks" xml:space="preserve">
    <value>Trucks</value>
  </data>
  <data name="TruckUpdatedSuccessfully" xml:space="preserve">
    <value>Truck updated successfully</value>
  </data>
  <data name="ValidationRange" xml:space="preserve">
    <value>The {0} must be from {1} to {2}</value>
  </data>
  <data name="ValidationPastDate" xml:space="preserve">
    <value>{0} must be in past only.</value>
  </data>
</root>
@model LMYFrameWorkMVC.Common.Models.Modules.Admin.Administration.Setting.SettingModel

@using LMYFrameWorkMVC.Common;
@{
    ViewBag.Title = Resources.SiteMapLocalizations.Edit + " " + Resources.SiteMapLocalizations.Settings;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div id="alertsContainer">
    @Html.Partial("~/Areas/Admin/Views/Shared/_Alerts.cshtml", Model)
</div>

@if (!Model.HasErrorByType(LMYFrameWorkMVC.Common.LookUps.ErrorType.Critical))
{
    <div class="col-md-12">
        <div class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption font-dark">

                    <span class="caption-subject bold uppercase">@Resources.Resources.Edit</span>
                </div>

                <div>
                    <div class="btn-group pull-right tools" id="#tools">


                    </div>
                </div>
            </div>
            <div class="portlet-body">

                @using (Html.BeginForm("Edit", "Settings", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.Name)
                    @Html.HiddenFor(model => model.Type)
                    @Html.HiddenFor(model => model.Key)

                    <div class="form-horizontal">

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Name, new {  @class = "form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        @if (Model.Type == LMYFrameWorkMVC.Common.LookUps.SettingsTypes.Bool)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.CheckBoxFor(model => model.BoolValue, new { htmlAttributes = new { @class = "checkbox" } })
                                    @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        else if (Model.Type == LMYFrameWorkMVC.Common.LookUps.SettingsTypes.Int || Model.Type == LMYFrameWorkMVC.Common.LookUps.SettingsTypes.String)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(model => model.Value, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        else if (Model.Type == LMYFrameWorkMVC.Common.LookUps.SettingsTypes.Int)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.IntValue, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(model => model.IntValue, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IntValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        else if (Model.Type == LMYFrameWorkMVC.Common.LookUps.SettingsTypes.image)
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.imageValue, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <img src="@Url.Action("GetImage", "Common", new {Area="Common", imageShortPath = Model.Value, width = 40, height = 40 })" alt="logo" class="logo-default" />
                                    @Html.TextBoxFor(model => model.imageValue, new { @type = "file" })
                                    @Html.ValidationMessageFor(model => model.imageValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }

                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="pull-right">
                                    <a href="@Url.Action("Index", "Settings")" class="btn btn-default">@Resources.Resources.Back</a>
                                    <input type="submit" value="@Resources.Resources.Save" class="btn btn-info" />
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
